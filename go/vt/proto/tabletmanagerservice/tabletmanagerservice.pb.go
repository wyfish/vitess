// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tabletmanagerservice.proto

package tabletmanagerservice

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
	tabletmanagerdata "vitess.io/vitess/go/vt/proto/tabletmanagerdata"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("tabletmanagerservice.proto", fileDescriptor_9ee75fe63cfd9360) }

var fileDescriptor_9ee75fe63cfd9360 = []byte{
	// 1030 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x98, 0x6d, 0x6f, 0x1b, 0x45,
	0x10, 0xc7, 0xb1, 0x04, 0x95, 0x58, 0x1e, 0xbb, 0xaa, 0x28, 0x0a, 0x12, 0x4f, 0x4d, 0x79, 0x48,
	0x51, 0xdc, 0x34, 0x94, 0xf7, 0x6e, 0x9a, 0xb4, 0x41, 0x8d, 0x30, 0x76, 0x43, 0x10, 0x48, 0x48,
	0x1b, 0x7b, 0xe2, 0x3b, 0x72, 0xde, 0x3d, 0x76, 0xf7, 0xac, 0xe6, 0x15, 0x12, 0x12, 0xaf, 0x90,
	0xf8, 0x4a, 0x7c, 0x35, 0x74, 0x0f, 0xbb, 0x37, 0x6b, 0xcf, 0xad, 0xed, 0x77, 0x91, 0xff, 0xbf,
	0x9d, 0x99, 0x9d, 0x9d, 0x99, 0xdd, 0x1c, 0xdb, 0xb1, 0xe2, 0x32, 0x03, 0x3b, 0x17, 0x52, 0xcc,
	0x40, 0x1b, 0xd0, 0x8b, 0x74, 0x02, 0xfb, 0xb9, 0x56, 0x56, 0xf1, 0x3b, 0x94, 0xb6, 0x73, 0x37,
	0xf8, 0x75, 0x2a, 0xac, 0xa8, 0xf1, 0x47, 0xff, 0xed, 0xb2, 0x77, 0x5e, 0x56, 0xda, 0x59, 0xad,
	0xf1, 0x53, 0xf6, 0xfa, 0x30, 0x95, 0x33, 0xfe, 0xf1, 0xfe, 0xea, 0x9a, 0x52, 0x18, 0xc1, 0x1f,
	0x05, 0x18, 0xbb, 0xf3, 0x49, 0xa7, 0x6e, 0x72, 0x25, 0x0d, 0x7c, 0xfe, 0x1a, 0x7f, 0xc1, 0xde,
	0x18, 0x67, 0x00, 0x39, 0xa7, 0xd8, 0x4a, 0x71, 0xc6, 0x3e, 0xed, 0x06, 0xbc, 0xb5, 0xdf, 0xd8,
	0x5b, 0xc7, 0xaf, 0x60, 0x52, 0x58, 0x78, 0xae, 0xd4, 0x35, 0xbf, 0x4f, 0x2c, 0x41, 0xba, 0xb3,
	0xfc, 0xc5, 0x3a, 0xcc, 0xdb, 0xff, 0x99, 0xbd, 0xf9, 0x0c, 0xec, 0x78, 0x92, 0xc0, 0x5c, 0xf0,
	0x7b, 0xc4, 0x32, 0xaf, 0x3a, 0xdb, 0xbb, 0x71, 0xc8, 0x5b, 0x9e, 0xb1, 0x77, 0x9f, 0x81, 0x1d,
	0x82, 0x9e, 0xa7, 0xc6, 0xa4, 0x4a, 0x1a, 0xfe, 0x15, 0xbd, 0x12, 0x21, 0xce, 0xc7, 0xd7, 0x1b,
	0x90, 0x38, 0x45, 0x63, 0xb0, 0x23, 0x10, 0xd3, 0x1f, 0x64, 0x76, 0x43, 0xa6, 0x08, 0xe9, 0xb1,
	0x14, 0x05, 0x98, 0xb7, 0x2f, 0xd8, 0xdb, 0x8d, 0x70, 0xa1, 0x53, 0x0b, 0x3c, 0xb2, 0xb2, 0x02,
	0x9c, 0x87, 0x2f, 0xd7, 0x72, 0xde, 0xc5, 0xaf, 0x8c, 0x1d, 0x25, 0x42, 0xce, 0xe0, 0xe5, 0x4d,
	0x0e, 0x9c, 0xca, 0x70, 0x2b, 0x3b, 0xf3, 0xf7, 0xd7, 0x50, 0x38, 0xfe, 0x11, 0x5c, 0x69, 0x30,
	0xc9, 0xd8, 0x8a, 0x8e, 0xf8, 0x31, 0x10, 0x8b, 0x3f, 0xe4, 0xf0, 0x59, 0x8f, 0x0a, 0xf9, 0x1c,
	0x44, 0x66, 0x93, 0xa3, 0x04, 0x26, 0xd7, 0xe4, 0x59, 0x87, 0x48, 0xec, 0xac, 0x97, 0x49, 0xef,
	0x28, 0x67, 0xb7, 0x4f, 0x67, 0x52, 0x69, 0xa8, 0xe5, 0x63, 0xad, 0x95, 0xe6, 0x0f, 0x08, 0x0b,
	0x2b, 0x94, 0x73, 0xf7, 0xcd, 0x66, 0x70, 0x98, 0xbd, 0x4c, 0x89, 0x69, 0xd3, 0x23, 0x74, 0xf6,
	0x5a, 0x20, 0x9e, 0x3d, 0xcc, 0x79, 0x17, 0xbf, 0xb3, 0xf7, 0x86, 0x1a, 0xae, 0xb2, 0x74, 0x96,
	0xb8, 0x4e, 0xa4, 0x92, 0xb2, 0xc4, 0x38, 0x47, 0x7b, 0x9b, 0xa0, 0xb8, 0x59, 0x06, 0x79, 0x9e,
	0xdd, 0x34, 0x7e, 0xa8, 0x22, 0x42, 0x7a, 0xac, 0x59, 0x02, 0x0c, 0x57, 0xf2, 0x0b, 0x35, 0xb9,
	0xae, 0xa6, 0xab, 0x21, 0x2b, 0xb9, 0x95, 0x63, 0x95, 0x8c, 0x29, 0x7c, 0x16, 0xe7, 0x32, 0x6b,
	0xcd, 0x53, 0x61, 0x61, 0x20, 0x76, 0x16, 0x21, 0x87, 0x0b, 0xac, 0x19, 0x94, 0x27, 0x60, 0x27,
	0xc9, 0xc0, 0x3c, 0xbd, 0x14, 0x64, 0x81, 0xad, 0x50, 0xb1, 0x02, 0x23, 0x60, 0xef, 0xf1, 0x4f,
	0xf6, 0x41, 0x28, 0x0f, 0xb2, 0x6c, 0xa8, 0xd3, 0x85, 0xe1, 0x0f, 0xd7, 0x5a, 0x72, 0xa8, 0xf3,
	0x7d, 0xb0, 0xc5, 0x8a, 0xee, 0x2d, 0x0f, 0xf2, 0x7c, 0x83, 0x2d, 0x0f, 0xf2, 0x7c, 0xf3, 0x2d,
	0x57, 0x70, 0x30, 0xb1, 0x33, 0xb1, 0x80, 0x72, 0x8c, 0x14, 0x86, 0x9e, 0xd8, 0xad, 0x1e, 0x9d,
	0xd8, 0x18, 0xc3, 0xe3, 0xe8, 0x4c, 0x18, 0x0b, 0x7a, 0xa8, 0x4c, 0x6a, 0x53, 0x25, 0xc9, 0x71,
	0x14, 0x22, 0xb1, 0x71, 0xb4, 0x4c, 0xe2, 0xdb, 0x73, 0x6c, 0x55, 0x5e, 0x45, 0x41, 0xde, 0x9e,
	0x5e, 0x8d, 0xdd, 0x9e, 0x08, 0xf2, 0x96, 0xe7, 0xec, 0x7d, 0xff, 0xf3, 0x59, 0x2a, 0xd3, 0x79,
	0x31, 0xe7, 0x7b, 0xb1, 0xb5, 0x0d, 0xe4, 0xfc, 0x3c, 0xd8, 0x88, 0xc5, 0x6d, 0x3b, 0xb6, 0x42,
	0xdb, 0x7a, 0x27, 0x74, 0x90, 0x4e, 0x8e, 0xb5, 0x2d, 0xa6, 0xbc, 0xf1, 0x1b, 0x76, 0xa7, 0xfd,
	0xfd, 0x5c, 0xda, 0x34, 0x1b, 0x5c, 0x59, 0xd0, 0x7c, 0x3f, 0x6a, 0xa0, 0x05, 0x9d, 0xc3, 0xfe,
	0xc6, 0xbc, 0x77, 0xfd, 0x4f, 0x8f, 0xed, 0xd4, 0x2f, 0xbd, 0xe3, 0x57, 0x16, 0xb4, 0x14, 0x59,
	0x79, 0xb5, 0xe7, 0x42, 0x83, 0xb4, 0x30, 0xe5, 0xdf, 0x12, 0x16, 0xbb, 0x71, 0x17, 0xc7, 0xe3,
	0x2d, 0x57, 0xf9, 0x68, 0xfe, 0xea, 0xb1, 0xbb, 0xcb, 0xe0, 0x71, 0x06, 0x93, 0x32, 0x94, 0x83,
	0x0d, 0x8c, 0x36, 0xac, 0x8b, 0xe3, 0xd1, 0x36, 0x4b, 0x96, 0x5f, 0x7c, 0x65, 0xca, 0x4c, 0xe7,
	0x8b, 0xaf, 0x52, 0xd7, 0xbd, 0xf8, 0x1a, 0x08, 0xd7, 0xec, 0x4f, 0x23, 0xc8, 0xb3, 0x74, 0x22,
	0xca, 0x3e, 0x29, 0x27, 0x00, 0x59, 0xb3, 0xcb, 0x50, 0xac, 0x66, 0x57, 0x59, 0x3c, 0x38, 0xb1,
	0x7a, 0x21, 0x52, 0x7b, 0xa2, 0xca, 0x2e, 0x25, 0x07, 0x27, 0x8d, 0xc6, 0x06, 0x67, 0xd7, 0x0a,
	0xbc, 0xdf, 0x11, 0x98, 0xf2, 0x45, 0xe7, 0x39, 0x72, 0xbf, 0xcb, 0x50, 0x6c, 0xbf, 0xab, 0x2c,
	0xee, 0xd1, 0x53, 0x99, 0xda, 0x7a, 0x18, 0x91, 0x3d, 0xda, 0xca, 0xb1, 0x1e, 0xc5, 0x54, 0x50,
	0x9a, 0x43, 0x95, 0x17, 0x59, 0xf5, 0xb0, 0xab, 0x6b, 0xf7, 0x7b, 0x55, 0x94, 0x45, 0x44, 0x96,
	0x66, 0x07, 0x1b, 0x2b, 0xcd, 0xce, 0x25, 0xb8, 0x34, 0xcb, 0xe0, 0xba, 0xc7, 0xa9, 0x57, 0x63,
	0xa5, 0x89, 0x20, 0xfc, 0x72, 0x78, 0x0a, 0x73, 0x65, 0xa1, 0xc9, 0x1e, 0x75, 0x97, 0x60, 0x20,
	0xf6, 0x72, 0x08, 0x39, 0x5c, 0x0d, 0xe7, 0x72, 0xaa, 0x02, 0x37, 0x7b, 0xe4, 0xc3, 0x23, 0x84,
	0x62, 0xd5, 0xb0, 0xca, 0x7a, 0x77, 0x7f, 0xf7, 0xd8, 0x87, 0x43, 0xad, 0x4a, 0xad, 0xda, 0xec,
	0x45, 0x02, 0xf2, 0x48, 0x14, 0xb3, 0xc4, 0x9e, 0xe7, 0x9c, 0x4c, 0x7f, 0x07, 0xec, 0xfc, 0x1f,
	0x6e, 0xb5, 0x26, 0xb8, 0xa8, 0x2a, 0x59, 0x98, 0x86, 0x9e, 0xd2, 0x17, 0xd5, 0x12, 0x14, 0xbd,
	0xa8, 0x56, 0xd8, 0xe0, 0xc6, 0x05, 0xd7, 0x03, 0xf7, 0xe8, 0xff, 0xb0, 0xc2, 0xbc, 0xee, 0xc6,
	0x21, 0xfc, 0x0c, 0x72, 0x7e, 0x47, 0x60, 0xca, 0x6b, 0x05, 0xa6, 0x3c, 0x16, 0x9d, 0xa7, 0x62,
	0xcf, 0x20, 0x02, 0xf6, 0x1e, 0xff, 0xed, 0xb1, 0x8f, 0xca, 0x3b, 0x19, 0xb5, 0xfb, 0x40, 0x4e,
	0xcb, 0xc9, 0x5a, 0xbf, 0x8b, 0x1e, 0x77, 0xdc, 0xe1, 0x1d, 0xbc, 0x0b, 0xe3, 0xbb, 0x6d, 0x97,
	0xe1, 0x2e, 0xc1, 0x27, 0x4e, 0x76, 0x09, 0x06, 0x62, 0x5d, 0x12, 0x72, 0xde, 0xc5, 0x8f, 0xec,
	0xd6, 0x13, 0x31, 0xb9, 0x2e, 0x72, 0x4e, 0x7d, 0xfd, 0xa8, 0x25, 0x67, 0xf6, 0xb3, 0x08, 0xe1,
	0x0c, 0x3e, 0xec, 0x71, 0xcd, 0x6e, 0x97, 0xd9, 0x55, 0x1a, 0x4e, 0xb4, 0x9a, 0x37, 0xd6, 0x3b,
	0x66, 0x6b, 0x48, 0xc5, 0x0e, 0x8e, 0x80, 0x5b, 0x9f, 0x4f, 0x0e, 0x7f, 0x39, 0x58, 0xa4, 0x16,
	0x8c, 0xd9, 0x4f, 0x55, 0xbf, 0xfe, 0xab, 0x3f, 0x53, 0xfd, 0x85, 0xed, 0x57, 0x5f, 0x98, 0xfa,
	0xd4, 0xf7, 0xa8, 0xcb, 0x5b, 0x95, 0x76, 0xf8, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xae, 0x75,
	0xbb, 0x5f, 0xca, 0x12, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TabletManagerClient is the client API for TabletManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TabletManagerClient interface {
	// Ping returns the input payload
	Ping(ctx context.Context, in *tabletmanagerdata.PingRequest, opts ...grpc.CallOption) (*tabletmanagerdata.PingResponse, error)
	// Sleep sleeps for the provided duration
	Sleep(ctx context.Context, in *tabletmanagerdata.SleepRequest, opts ...grpc.CallOption) (*tabletmanagerdata.SleepResponse, error)
	// ExecuteHook executes the hook remotely
	ExecuteHook(ctx context.Context, in *tabletmanagerdata.ExecuteHookRequest, opts ...grpc.CallOption) (*tabletmanagerdata.ExecuteHookResponse, error)
	// GetSchema asks the tablet for its schema
	GetSchema(ctx context.Context, in *tabletmanagerdata.GetSchemaRequest, opts ...grpc.CallOption) (*tabletmanagerdata.GetSchemaResponse, error)
	// GetPermissions asks the tablet for its permissions
	GetPermissions(ctx context.Context, in *tabletmanagerdata.GetPermissionsRequest, opts ...grpc.CallOption) (*tabletmanagerdata.GetPermissionsResponse, error)
	SetReadOnly(ctx context.Context, in *tabletmanagerdata.SetReadOnlyRequest, opts ...grpc.CallOption) (*tabletmanagerdata.SetReadOnlyResponse, error)
	SetReadWrite(ctx context.Context, in *tabletmanagerdata.SetReadWriteRequest, opts ...grpc.CallOption) (*tabletmanagerdata.SetReadWriteResponse, error)
	// ChangeType asks the remote tablet to change its type
	ChangeType(ctx context.Context, in *tabletmanagerdata.ChangeTypeRequest, opts ...grpc.CallOption) (*tabletmanagerdata.ChangeTypeResponse, error)
	RefreshState(ctx context.Context, in *tabletmanagerdata.RefreshStateRequest, opts ...grpc.CallOption) (*tabletmanagerdata.RefreshStateResponse, error)
	RunHealthCheck(ctx context.Context, in *tabletmanagerdata.RunHealthCheckRequest, opts ...grpc.CallOption) (*tabletmanagerdata.RunHealthCheckResponse, error)
	IgnoreHealthError(ctx context.Context, in *tabletmanagerdata.IgnoreHealthErrorRequest, opts ...grpc.CallOption) (*tabletmanagerdata.IgnoreHealthErrorResponse, error)
	ReloadSchema(ctx context.Context, in *tabletmanagerdata.ReloadSchemaRequest, opts ...grpc.CallOption) (*tabletmanagerdata.ReloadSchemaResponse, error)
	PreflightSchema(ctx context.Context, in *tabletmanagerdata.PreflightSchemaRequest, opts ...grpc.CallOption) (*tabletmanagerdata.PreflightSchemaResponse, error)
	ApplySchema(ctx context.Context, in *tabletmanagerdata.ApplySchemaRequest, opts ...grpc.CallOption) (*tabletmanagerdata.ApplySchemaResponse, error)
	LockTables(ctx context.Context, in *tabletmanagerdata.LockTablesRequest, opts ...grpc.CallOption) (*tabletmanagerdata.LockTablesResponse, error)
	UnlockTables(ctx context.Context, in *tabletmanagerdata.UnlockTablesRequest, opts ...grpc.CallOption) (*tabletmanagerdata.UnlockTablesResponse, error)
	ExecuteFetchAsDba(ctx context.Context, in *tabletmanagerdata.ExecuteFetchAsDbaRequest, opts ...grpc.CallOption) (*tabletmanagerdata.ExecuteFetchAsDbaResponse, error)
	ExecuteFetchAsAllPrivs(ctx context.Context, in *tabletmanagerdata.ExecuteFetchAsAllPrivsRequest, opts ...grpc.CallOption) (*tabletmanagerdata.ExecuteFetchAsAllPrivsResponse, error)
	ExecuteFetchAsApp(ctx context.Context, in *tabletmanagerdata.ExecuteFetchAsAppRequest, opts ...grpc.CallOption) (*tabletmanagerdata.ExecuteFetchAsAppResponse, error)
	// SubordinateStatus returns the current subordinate status.
	SubordinateStatus(ctx context.Context, in *tabletmanagerdata.SubordinateStatusRequest, opts ...grpc.CallOption) (*tabletmanagerdata.SubordinateStatusResponse, error)
	// MainPosition returns the current main position
	MainPosition(ctx context.Context, in *tabletmanagerdata.MainPositionRequest, opts ...grpc.CallOption) (*tabletmanagerdata.MainPositionResponse, error)
	// StopSubordinate makes mysql stop its replication
	StopSubordinate(ctx context.Context, in *tabletmanagerdata.StopSubordinateRequest, opts ...grpc.CallOption) (*tabletmanagerdata.StopSubordinateResponse, error)
	// StopSubordinateMinimum stops the mysql replication after it reaches
	// the provided minimum point
	StopSubordinateMinimum(ctx context.Context, in *tabletmanagerdata.StopSubordinateMinimumRequest, opts ...grpc.CallOption) (*tabletmanagerdata.StopSubordinateMinimumResponse, error)
	// StartSubordinate starts the mysql replication
	StartSubordinate(ctx context.Context, in *tabletmanagerdata.StartSubordinateRequest, opts ...grpc.CallOption) (*tabletmanagerdata.StartSubordinateResponse, error)
	// StartSubordinate starts the mysql replication until and including
	// the provided position
	StartSubordinateUntilAfter(ctx context.Context, in *tabletmanagerdata.StartSubordinateUntilAfterRequest, opts ...grpc.CallOption) (*tabletmanagerdata.StartSubordinateUntilAfterResponse, error)
	// TabletExternallyReparented tells a tablet that its underlying MySQL is
	// currently the main. It is only used in environments (tabletmanagerdata.such as Vitess+MoB)
	// in which MySQL is reparented by some agent external to Vitess, and then
	// that agent simply notifies Vitess.
	//
	// This call is idempotent with respect to a single target tablet.
	// However, the tablet assumes there is a cooling-off period following the
	// initial external reparent from A to B, before this call is repeated on any
	// tablet other than B. This assumption is configurable with the vttablet flag
	// "finalize_external_reparent_timeout".
	//
	// For more information, see the design doc at go/vt-fast-failover.
	TabletExternallyReparented(ctx context.Context, in *tabletmanagerdata.TabletExternallyReparentedRequest, opts ...grpc.CallOption) (*tabletmanagerdata.TabletExternallyReparentedResponse, error)
	// TabletExternallyElected is an notification that may be sent in
	// anticipation of potentially later sending TabletExternallyReparented.
	// The tablet can use this extra lead time to prepare to react quickly if
	// TabletExternallyReparented does follow.
	//
	// This call is effectively a no-op if it is not followed by a call to
	// TabletExternallyReparented, so the external agent doing the reparent can
	// still change its mind.
	//
	// The agent does not need to wait for this call or cancel it before calling
	// TabletExternallyReparented if the external reparent operation finishes
	// before TabletExternallyElected returns.
	TabletExternallyElected(ctx context.Context, in *tabletmanagerdata.TabletExternallyElectedRequest, opts ...grpc.CallOption) (*tabletmanagerdata.TabletExternallyElectedResponse, error)
	// GetSubordinates asks for the list of mysql subordinates
	GetSubordinates(ctx context.Context, in *tabletmanagerdata.GetSubordinatesRequest, opts ...grpc.CallOption) (*tabletmanagerdata.GetSubordinatesResponse, error)
	// VReplication API
	VReplicationExec(ctx context.Context, in *tabletmanagerdata.VReplicationExecRequest, opts ...grpc.CallOption) (*tabletmanagerdata.VReplicationExecResponse, error)
	VReplicationWaitForPos(ctx context.Context, in *tabletmanagerdata.VReplicationWaitForPosRequest, opts ...grpc.CallOption) (*tabletmanagerdata.VReplicationWaitForPosResponse, error)
	// ResetReplication makes the target not replicating
	ResetReplication(ctx context.Context, in *tabletmanagerdata.ResetReplicationRequest, opts ...grpc.CallOption) (*tabletmanagerdata.ResetReplicationResponse, error)
	// InitMain initializes the tablet as a main
	InitMain(ctx context.Context, in *tabletmanagerdata.InitMainRequest, opts ...grpc.CallOption) (*tabletmanagerdata.InitMainResponse, error)
	// PopulateReparentJournal tells the tablet to add an entry to its
	// reparent journal
	PopulateReparentJournal(ctx context.Context, in *tabletmanagerdata.PopulateReparentJournalRequest, opts ...grpc.CallOption) (*tabletmanagerdata.PopulateReparentJournalResponse, error)
	// InitSubordinate tells the tablet to reparent to the main unconditionally
	InitSubordinate(ctx context.Context, in *tabletmanagerdata.InitSubordinateRequest, opts ...grpc.CallOption) (*tabletmanagerdata.InitSubordinateResponse, error)
	// DemoteMain tells the soon-to-be-former main it's gonna change
	DemoteMain(ctx context.Context, in *tabletmanagerdata.DemoteMainRequest, opts ...grpc.CallOption) (*tabletmanagerdata.DemoteMainResponse, error)
	// UndoDemoteMain reverts all changes made by DemoteMain
	UndoDemoteMain(ctx context.Context, in *tabletmanagerdata.UndoDemoteMainRequest, opts ...grpc.CallOption) (*tabletmanagerdata.UndoDemoteMainResponse, error)
	// PromoteSubordinateWhenCaughtUp tells the remote tablet to catch up,
	// and then be the main
	PromoteSubordinateWhenCaughtUp(ctx context.Context, in *tabletmanagerdata.PromoteSubordinateWhenCaughtUpRequest, opts ...grpc.CallOption) (*tabletmanagerdata.PromoteSubordinateWhenCaughtUpResponse, error)
	// SubordinateWasPromoted tells the remote tablet it is now the main
	SubordinateWasPromoted(ctx context.Context, in *tabletmanagerdata.SubordinateWasPromotedRequest, opts ...grpc.CallOption) (*tabletmanagerdata.SubordinateWasPromotedResponse, error)
	// SetMain tells the subordinate to reparent
	SetMain(ctx context.Context, in *tabletmanagerdata.SetMainRequest, opts ...grpc.CallOption) (*tabletmanagerdata.SetMainResponse, error)
	// SubordinateWasRestarted tells the remote tablet its main has changed
	SubordinateWasRestarted(ctx context.Context, in *tabletmanagerdata.SubordinateWasRestartedRequest, opts ...grpc.CallOption) (*tabletmanagerdata.SubordinateWasRestartedResponse, error)
	// StopReplicationAndGetStatus stops MySQL replication, and returns the
	// replication status
	StopReplicationAndGetStatus(ctx context.Context, in *tabletmanagerdata.StopReplicationAndGetStatusRequest, opts ...grpc.CallOption) (*tabletmanagerdata.StopReplicationAndGetStatusResponse, error)
	// PromoteSubordinate makes the subordinate the new main
	PromoteSubordinate(ctx context.Context, in *tabletmanagerdata.PromoteSubordinateRequest, opts ...grpc.CallOption) (*tabletmanagerdata.PromoteSubordinateResponse, error)
	Backup(ctx context.Context, in *tabletmanagerdata.BackupRequest, opts ...grpc.CallOption) (TabletManager_BackupClient, error)
	// RestoreFromBackup deletes all local data and restores it from the latest backup.
	RestoreFromBackup(ctx context.Context, in *tabletmanagerdata.RestoreFromBackupRequest, opts ...grpc.CallOption) (TabletManager_RestoreFromBackupClient, error)
}

type tabletManagerClient struct {
	cc *grpc.ClientConn
}

func NewTabletManagerClient(cc *grpc.ClientConn) TabletManagerClient {
	return &tabletManagerClient{cc}
}

func (c *tabletManagerClient) Ping(ctx context.Context, in *tabletmanagerdata.PingRequest, opts ...grpc.CallOption) (*tabletmanagerdata.PingResponse, error) {
	out := new(tabletmanagerdata.PingResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) Sleep(ctx context.Context, in *tabletmanagerdata.SleepRequest, opts ...grpc.CallOption) (*tabletmanagerdata.SleepResponse, error) {
	out := new(tabletmanagerdata.SleepResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/Sleep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) ExecuteHook(ctx context.Context, in *tabletmanagerdata.ExecuteHookRequest, opts ...grpc.CallOption) (*tabletmanagerdata.ExecuteHookResponse, error) {
	out := new(tabletmanagerdata.ExecuteHookResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/ExecuteHook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) GetSchema(ctx context.Context, in *tabletmanagerdata.GetSchemaRequest, opts ...grpc.CallOption) (*tabletmanagerdata.GetSchemaResponse, error) {
	out := new(tabletmanagerdata.GetSchemaResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/GetSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) GetPermissions(ctx context.Context, in *tabletmanagerdata.GetPermissionsRequest, opts ...grpc.CallOption) (*tabletmanagerdata.GetPermissionsResponse, error) {
	out := new(tabletmanagerdata.GetPermissionsResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/GetPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) SetReadOnly(ctx context.Context, in *tabletmanagerdata.SetReadOnlyRequest, opts ...grpc.CallOption) (*tabletmanagerdata.SetReadOnlyResponse, error) {
	out := new(tabletmanagerdata.SetReadOnlyResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/SetReadOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) SetReadWrite(ctx context.Context, in *tabletmanagerdata.SetReadWriteRequest, opts ...grpc.CallOption) (*tabletmanagerdata.SetReadWriteResponse, error) {
	out := new(tabletmanagerdata.SetReadWriteResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/SetReadWrite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) ChangeType(ctx context.Context, in *tabletmanagerdata.ChangeTypeRequest, opts ...grpc.CallOption) (*tabletmanagerdata.ChangeTypeResponse, error) {
	out := new(tabletmanagerdata.ChangeTypeResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/ChangeType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) RefreshState(ctx context.Context, in *tabletmanagerdata.RefreshStateRequest, opts ...grpc.CallOption) (*tabletmanagerdata.RefreshStateResponse, error) {
	out := new(tabletmanagerdata.RefreshStateResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/RefreshState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) RunHealthCheck(ctx context.Context, in *tabletmanagerdata.RunHealthCheckRequest, opts ...grpc.CallOption) (*tabletmanagerdata.RunHealthCheckResponse, error) {
	out := new(tabletmanagerdata.RunHealthCheckResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/RunHealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) IgnoreHealthError(ctx context.Context, in *tabletmanagerdata.IgnoreHealthErrorRequest, opts ...grpc.CallOption) (*tabletmanagerdata.IgnoreHealthErrorResponse, error) {
	out := new(tabletmanagerdata.IgnoreHealthErrorResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/IgnoreHealthError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) ReloadSchema(ctx context.Context, in *tabletmanagerdata.ReloadSchemaRequest, opts ...grpc.CallOption) (*tabletmanagerdata.ReloadSchemaResponse, error) {
	out := new(tabletmanagerdata.ReloadSchemaResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/ReloadSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) PreflightSchema(ctx context.Context, in *tabletmanagerdata.PreflightSchemaRequest, opts ...grpc.CallOption) (*tabletmanagerdata.PreflightSchemaResponse, error) {
	out := new(tabletmanagerdata.PreflightSchemaResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/PreflightSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) ApplySchema(ctx context.Context, in *tabletmanagerdata.ApplySchemaRequest, opts ...grpc.CallOption) (*tabletmanagerdata.ApplySchemaResponse, error) {
	out := new(tabletmanagerdata.ApplySchemaResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/ApplySchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) LockTables(ctx context.Context, in *tabletmanagerdata.LockTablesRequest, opts ...grpc.CallOption) (*tabletmanagerdata.LockTablesResponse, error) {
	out := new(tabletmanagerdata.LockTablesResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/LockTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) UnlockTables(ctx context.Context, in *tabletmanagerdata.UnlockTablesRequest, opts ...grpc.CallOption) (*tabletmanagerdata.UnlockTablesResponse, error) {
	out := new(tabletmanagerdata.UnlockTablesResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/UnlockTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) ExecuteFetchAsDba(ctx context.Context, in *tabletmanagerdata.ExecuteFetchAsDbaRequest, opts ...grpc.CallOption) (*tabletmanagerdata.ExecuteFetchAsDbaResponse, error) {
	out := new(tabletmanagerdata.ExecuteFetchAsDbaResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/ExecuteFetchAsDba", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) ExecuteFetchAsAllPrivs(ctx context.Context, in *tabletmanagerdata.ExecuteFetchAsAllPrivsRequest, opts ...grpc.CallOption) (*tabletmanagerdata.ExecuteFetchAsAllPrivsResponse, error) {
	out := new(tabletmanagerdata.ExecuteFetchAsAllPrivsResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/ExecuteFetchAsAllPrivs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) ExecuteFetchAsApp(ctx context.Context, in *tabletmanagerdata.ExecuteFetchAsAppRequest, opts ...grpc.CallOption) (*tabletmanagerdata.ExecuteFetchAsAppResponse, error) {
	out := new(tabletmanagerdata.ExecuteFetchAsAppResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/ExecuteFetchAsApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) SubordinateStatus(ctx context.Context, in *tabletmanagerdata.SubordinateStatusRequest, opts ...grpc.CallOption) (*tabletmanagerdata.SubordinateStatusResponse, error) {
	out := new(tabletmanagerdata.SubordinateStatusResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/SubordinateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) MainPosition(ctx context.Context, in *tabletmanagerdata.MainPositionRequest, opts ...grpc.CallOption) (*tabletmanagerdata.MainPositionResponse, error) {
	out := new(tabletmanagerdata.MainPositionResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/MainPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) StopSubordinate(ctx context.Context, in *tabletmanagerdata.StopSubordinateRequest, opts ...grpc.CallOption) (*tabletmanagerdata.StopSubordinateResponse, error) {
	out := new(tabletmanagerdata.StopSubordinateResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/StopSubordinate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) StopSubordinateMinimum(ctx context.Context, in *tabletmanagerdata.StopSubordinateMinimumRequest, opts ...grpc.CallOption) (*tabletmanagerdata.StopSubordinateMinimumResponse, error) {
	out := new(tabletmanagerdata.StopSubordinateMinimumResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/StopSubordinateMinimum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) StartSubordinate(ctx context.Context, in *tabletmanagerdata.StartSubordinateRequest, opts ...grpc.CallOption) (*tabletmanagerdata.StartSubordinateResponse, error) {
	out := new(tabletmanagerdata.StartSubordinateResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/StartSubordinate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) StartSubordinateUntilAfter(ctx context.Context, in *tabletmanagerdata.StartSubordinateUntilAfterRequest, opts ...grpc.CallOption) (*tabletmanagerdata.StartSubordinateUntilAfterResponse, error) {
	out := new(tabletmanagerdata.StartSubordinateUntilAfterResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/StartSubordinateUntilAfter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) TabletExternallyReparented(ctx context.Context, in *tabletmanagerdata.TabletExternallyReparentedRequest, opts ...grpc.CallOption) (*tabletmanagerdata.TabletExternallyReparentedResponse, error) {
	out := new(tabletmanagerdata.TabletExternallyReparentedResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/TabletExternallyReparented", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) TabletExternallyElected(ctx context.Context, in *tabletmanagerdata.TabletExternallyElectedRequest, opts ...grpc.CallOption) (*tabletmanagerdata.TabletExternallyElectedResponse, error) {
	out := new(tabletmanagerdata.TabletExternallyElectedResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/TabletExternallyElected", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) GetSubordinates(ctx context.Context, in *tabletmanagerdata.GetSubordinatesRequest, opts ...grpc.CallOption) (*tabletmanagerdata.GetSubordinatesResponse, error) {
	out := new(tabletmanagerdata.GetSubordinatesResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/GetSubordinates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) VReplicationExec(ctx context.Context, in *tabletmanagerdata.VReplicationExecRequest, opts ...grpc.CallOption) (*tabletmanagerdata.VReplicationExecResponse, error) {
	out := new(tabletmanagerdata.VReplicationExecResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/VReplicationExec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) VReplicationWaitForPos(ctx context.Context, in *tabletmanagerdata.VReplicationWaitForPosRequest, opts ...grpc.CallOption) (*tabletmanagerdata.VReplicationWaitForPosResponse, error) {
	out := new(tabletmanagerdata.VReplicationWaitForPosResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/VReplicationWaitForPos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) ResetReplication(ctx context.Context, in *tabletmanagerdata.ResetReplicationRequest, opts ...grpc.CallOption) (*tabletmanagerdata.ResetReplicationResponse, error) {
	out := new(tabletmanagerdata.ResetReplicationResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/ResetReplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) InitMain(ctx context.Context, in *tabletmanagerdata.InitMainRequest, opts ...grpc.CallOption) (*tabletmanagerdata.InitMainResponse, error) {
	out := new(tabletmanagerdata.InitMainResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/InitMain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) PopulateReparentJournal(ctx context.Context, in *tabletmanagerdata.PopulateReparentJournalRequest, opts ...grpc.CallOption) (*tabletmanagerdata.PopulateReparentJournalResponse, error) {
	out := new(tabletmanagerdata.PopulateReparentJournalResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/PopulateReparentJournal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) InitSubordinate(ctx context.Context, in *tabletmanagerdata.InitSubordinateRequest, opts ...grpc.CallOption) (*tabletmanagerdata.InitSubordinateResponse, error) {
	out := new(tabletmanagerdata.InitSubordinateResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/InitSubordinate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) DemoteMain(ctx context.Context, in *tabletmanagerdata.DemoteMainRequest, opts ...grpc.CallOption) (*tabletmanagerdata.DemoteMainResponse, error) {
	out := new(tabletmanagerdata.DemoteMainResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/DemoteMain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) UndoDemoteMain(ctx context.Context, in *tabletmanagerdata.UndoDemoteMainRequest, opts ...grpc.CallOption) (*tabletmanagerdata.UndoDemoteMainResponse, error) {
	out := new(tabletmanagerdata.UndoDemoteMainResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/UndoDemoteMain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) PromoteSubordinateWhenCaughtUp(ctx context.Context, in *tabletmanagerdata.PromoteSubordinateWhenCaughtUpRequest, opts ...grpc.CallOption) (*tabletmanagerdata.PromoteSubordinateWhenCaughtUpResponse, error) {
	out := new(tabletmanagerdata.PromoteSubordinateWhenCaughtUpResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/PromoteSubordinateWhenCaughtUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) SubordinateWasPromoted(ctx context.Context, in *tabletmanagerdata.SubordinateWasPromotedRequest, opts ...grpc.CallOption) (*tabletmanagerdata.SubordinateWasPromotedResponse, error) {
	out := new(tabletmanagerdata.SubordinateWasPromotedResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/SubordinateWasPromoted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) SetMain(ctx context.Context, in *tabletmanagerdata.SetMainRequest, opts ...grpc.CallOption) (*tabletmanagerdata.SetMainResponse, error) {
	out := new(tabletmanagerdata.SetMainResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/SetMain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) SubordinateWasRestarted(ctx context.Context, in *tabletmanagerdata.SubordinateWasRestartedRequest, opts ...grpc.CallOption) (*tabletmanagerdata.SubordinateWasRestartedResponse, error) {
	out := new(tabletmanagerdata.SubordinateWasRestartedResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/SubordinateWasRestarted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) StopReplicationAndGetStatus(ctx context.Context, in *tabletmanagerdata.StopReplicationAndGetStatusRequest, opts ...grpc.CallOption) (*tabletmanagerdata.StopReplicationAndGetStatusResponse, error) {
	out := new(tabletmanagerdata.StopReplicationAndGetStatusResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/StopReplicationAndGetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) PromoteSubordinate(ctx context.Context, in *tabletmanagerdata.PromoteSubordinateRequest, opts ...grpc.CallOption) (*tabletmanagerdata.PromoteSubordinateResponse, error) {
	out := new(tabletmanagerdata.PromoteSubordinateResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/PromoteSubordinate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletManagerClient) Backup(ctx context.Context, in *tabletmanagerdata.BackupRequest, opts ...grpc.CallOption) (TabletManager_BackupClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TabletManager_serviceDesc.Streams[0], "/tabletmanagerservice.TabletManager/Backup", opts...)
	if err != nil {
		return nil, err
	}
	x := &tabletManagerBackupClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TabletManager_BackupClient interface {
	Recv() (*tabletmanagerdata.BackupResponse, error)
	grpc.ClientStream
}

type tabletManagerBackupClient struct {
	grpc.ClientStream
}

func (x *tabletManagerBackupClient) Recv() (*tabletmanagerdata.BackupResponse, error) {
	m := new(tabletmanagerdata.BackupResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tabletManagerClient) RestoreFromBackup(ctx context.Context, in *tabletmanagerdata.RestoreFromBackupRequest, opts ...grpc.CallOption) (TabletManager_RestoreFromBackupClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TabletManager_serviceDesc.Streams[1], "/tabletmanagerservice.TabletManager/RestoreFromBackup", opts...)
	if err != nil {
		return nil, err
	}
	x := &tabletManagerRestoreFromBackupClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TabletManager_RestoreFromBackupClient interface {
	Recv() (*tabletmanagerdata.RestoreFromBackupResponse, error)
	grpc.ClientStream
}

type tabletManagerRestoreFromBackupClient struct {
	grpc.ClientStream
}

func (x *tabletManagerRestoreFromBackupClient) Recv() (*tabletmanagerdata.RestoreFromBackupResponse, error) {
	m := new(tabletmanagerdata.RestoreFromBackupResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TabletManagerServer is the server API for TabletManager service.
type TabletManagerServer interface {
	// Ping returns the input payload
	Ping(context.Context, *tabletmanagerdata.PingRequest) (*tabletmanagerdata.PingResponse, error)
	// Sleep sleeps for the provided duration
	Sleep(context.Context, *tabletmanagerdata.SleepRequest) (*tabletmanagerdata.SleepResponse, error)
	// ExecuteHook executes the hook remotely
	ExecuteHook(context.Context, *tabletmanagerdata.ExecuteHookRequest) (*tabletmanagerdata.ExecuteHookResponse, error)
	// GetSchema asks the tablet for its schema
	GetSchema(context.Context, *tabletmanagerdata.GetSchemaRequest) (*tabletmanagerdata.GetSchemaResponse, error)
	// GetPermissions asks the tablet for its permissions
	GetPermissions(context.Context, *tabletmanagerdata.GetPermissionsRequest) (*tabletmanagerdata.GetPermissionsResponse, error)
	SetReadOnly(context.Context, *tabletmanagerdata.SetReadOnlyRequest) (*tabletmanagerdata.SetReadOnlyResponse, error)
	SetReadWrite(context.Context, *tabletmanagerdata.SetReadWriteRequest) (*tabletmanagerdata.SetReadWriteResponse, error)
	// ChangeType asks the remote tablet to change its type
	ChangeType(context.Context, *tabletmanagerdata.ChangeTypeRequest) (*tabletmanagerdata.ChangeTypeResponse, error)
	RefreshState(context.Context, *tabletmanagerdata.RefreshStateRequest) (*tabletmanagerdata.RefreshStateResponse, error)
	RunHealthCheck(context.Context, *tabletmanagerdata.RunHealthCheckRequest) (*tabletmanagerdata.RunHealthCheckResponse, error)
	IgnoreHealthError(context.Context, *tabletmanagerdata.IgnoreHealthErrorRequest) (*tabletmanagerdata.IgnoreHealthErrorResponse, error)
	ReloadSchema(context.Context, *tabletmanagerdata.ReloadSchemaRequest) (*tabletmanagerdata.ReloadSchemaResponse, error)
	PreflightSchema(context.Context, *tabletmanagerdata.PreflightSchemaRequest) (*tabletmanagerdata.PreflightSchemaResponse, error)
	ApplySchema(context.Context, *tabletmanagerdata.ApplySchemaRequest) (*tabletmanagerdata.ApplySchemaResponse, error)
	LockTables(context.Context, *tabletmanagerdata.LockTablesRequest) (*tabletmanagerdata.LockTablesResponse, error)
	UnlockTables(context.Context, *tabletmanagerdata.UnlockTablesRequest) (*tabletmanagerdata.UnlockTablesResponse, error)
	ExecuteFetchAsDba(context.Context, *tabletmanagerdata.ExecuteFetchAsDbaRequest) (*tabletmanagerdata.ExecuteFetchAsDbaResponse, error)
	ExecuteFetchAsAllPrivs(context.Context, *tabletmanagerdata.ExecuteFetchAsAllPrivsRequest) (*tabletmanagerdata.ExecuteFetchAsAllPrivsResponse, error)
	ExecuteFetchAsApp(context.Context, *tabletmanagerdata.ExecuteFetchAsAppRequest) (*tabletmanagerdata.ExecuteFetchAsAppResponse, error)
	// SubordinateStatus returns the current subordinate status.
	SubordinateStatus(context.Context, *tabletmanagerdata.SubordinateStatusRequest) (*tabletmanagerdata.SubordinateStatusResponse, error)
	// MainPosition returns the current main position
	MainPosition(context.Context, *tabletmanagerdata.MainPositionRequest) (*tabletmanagerdata.MainPositionResponse, error)
	// StopSubordinate makes mysql stop its replication
	StopSubordinate(context.Context, *tabletmanagerdata.StopSubordinateRequest) (*tabletmanagerdata.StopSubordinateResponse, error)
	// StopSubordinateMinimum stops the mysql replication after it reaches
	// the provided minimum point
	StopSubordinateMinimum(context.Context, *tabletmanagerdata.StopSubordinateMinimumRequest) (*tabletmanagerdata.StopSubordinateMinimumResponse, error)
	// StartSubordinate starts the mysql replication
	StartSubordinate(context.Context, *tabletmanagerdata.StartSubordinateRequest) (*tabletmanagerdata.StartSubordinateResponse, error)
	// StartSubordinate starts the mysql replication until and including
	// the provided position
	StartSubordinateUntilAfter(context.Context, *tabletmanagerdata.StartSubordinateUntilAfterRequest) (*tabletmanagerdata.StartSubordinateUntilAfterResponse, error)
	// TabletExternallyReparented tells a tablet that its underlying MySQL is
	// currently the main. It is only used in environments (tabletmanagerdata.such as Vitess+MoB)
	// in which MySQL is reparented by some agent external to Vitess, and then
	// that agent simply notifies Vitess.
	//
	// This call is idempotent with respect to a single target tablet.
	// However, the tablet assumes there is a cooling-off period following the
	// initial external reparent from A to B, before this call is repeated on any
	// tablet other than B. This assumption is configurable with the vttablet flag
	// "finalize_external_reparent_timeout".
	//
	// For more information, see the design doc at go/vt-fast-failover.
	TabletExternallyReparented(context.Context, *tabletmanagerdata.TabletExternallyReparentedRequest) (*tabletmanagerdata.TabletExternallyReparentedResponse, error)
	// TabletExternallyElected is an notification that may be sent in
	// anticipation of potentially later sending TabletExternallyReparented.
	// The tablet can use this extra lead time to prepare to react quickly if
	// TabletExternallyReparented does follow.
	//
	// This call is effectively a no-op if it is not followed by a call to
	// TabletExternallyReparented, so the external agent doing the reparent can
	// still change its mind.
	//
	// The agent does not need to wait for this call or cancel it before calling
	// TabletExternallyReparented if the external reparent operation finishes
	// before TabletExternallyElected returns.
	TabletExternallyElected(context.Context, *tabletmanagerdata.TabletExternallyElectedRequest) (*tabletmanagerdata.TabletExternallyElectedResponse, error)
	// GetSubordinates asks for the list of mysql subordinates
	GetSubordinates(context.Context, *tabletmanagerdata.GetSubordinatesRequest) (*tabletmanagerdata.GetSubordinatesResponse, error)
	// VReplication API
	VReplicationExec(context.Context, *tabletmanagerdata.VReplicationExecRequest) (*tabletmanagerdata.VReplicationExecResponse, error)
	VReplicationWaitForPos(context.Context, *tabletmanagerdata.VReplicationWaitForPosRequest) (*tabletmanagerdata.VReplicationWaitForPosResponse, error)
	// ResetReplication makes the target not replicating
	ResetReplication(context.Context, *tabletmanagerdata.ResetReplicationRequest) (*tabletmanagerdata.ResetReplicationResponse, error)
	// InitMain initializes the tablet as a main
	InitMain(context.Context, *tabletmanagerdata.InitMainRequest) (*tabletmanagerdata.InitMainResponse, error)
	// PopulateReparentJournal tells the tablet to add an entry to its
	// reparent journal
	PopulateReparentJournal(context.Context, *tabletmanagerdata.PopulateReparentJournalRequest) (*tabletmanagerdata.PopulateReparentJournalResponse, error)
	// InitSubordinate tells the tablet to reparent to the main unconditionally
	InitSubordinate(context.Context, *tabletmanagerdata.InitSubordinateRequest) (*tabletmanagerdata.InitSubordinateResponse, error)
	// DemoteMain tells the soon-to-be-former main it's gonna change
	DemoteMain(context.Context, *tabletmanagerdata.DemoteMainRequest) (*tabletmanagerdata.DemoteMainResponse, error)
	// UndoDemoteMain reverts all changes made by DemoteMain
	UndoDemoteMain(context.Context, *tabletmanagerdata.UndoDemoteMainRequest) (*tabletmanagerdata.UndoDemoteMainResponse, error)
	// PromoteSubordinateWhenCaughtUp tells the remote tablet to catch up,
	// and then be the main
	PromoteSubordinateWhenCaughtUp(context.Context, *tabletmanagerdata.PromoteSubordinateWhenCaughtUpRequest) (*tabletmanagerdata.PromoteSubordinateWhenCaughtUpResponse, error)
	// SubordinateWasPromoted tells the remote tablet it is now the main
	SubordinateWasPromoted(context.Context, *tabletmanagerdata.SubordinateWasPromotedRequest) (*tabletmanagerdata.SubordinateWasPromotedResponse, error)
	// SetMain tells the subordinate to reparent
	SetMain(context.Context, *tabletmanagerdata.SetMainRequest) (*tabletmanagerdata.SetMainResponse, error)
	// SubordinateWasRestarted tells the remote tablet its main has changed
	SubordinateWasRestarted(context.Context, *tabletmanagerdata.SubordinateWasRestartedRequest) (*tabletmanagerdata.SubordinateWasRestartedResponse, error)
	// StopReplicationAndGetStatus stops MySQL replication, and returns the
	// replication status
	StopReplicationAndGetStatus(context.Context, *tabletmanagerdata.StopReplicationAndGetStatusRequest) (*tabletmanagerdata.StopReplicationAndGetStatusResponse, error)
	// PromoteSubordinate makes the subordinate the new main
	PromoteSubordinate(context.Context, *tabletmanagerdata.PromoteSubordinateRequest) (*tabletmanagerdata.PromoteSubordinateResponse, error)
	Backup(*tabletmanagerdata.BackupRequest, TabletManager_BackupServer) error
	// RestoreFromBackup deletes all local data and restores it from the latest backup.
	RestoreFromBackup(*tabletmanagerdata.RestoreFromBackupRequest, TabletManager_RestoreFromBackupServer) error
}

// UnimplementedTabletManagerServer can be embedded to have forward compatible implementations.
type UnimplementedTabletManagerServer struct {
}

func (*UnimplementedTabletManagerServer) Ping(ctx context.Context, req *tabletmanagerdata.PingRequest) (*tabletmanagerdata.PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedTabletManagerServer) Sleep(ctx context.Context, req *tabletmanagerdata.SleepRequest) (*tabletmanagerdata.SleepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sleep not implemented")
}
func (*UnimplementedTabletManagerServer) ExecuteHook(ctx context.Context, req *tabletmanagerdata.ExecuteHookRequest) (*tabletmanagerdata.ExecuteHookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteHook not implemented")
}
func (*UnimplementedTabletManagerServer) GetSchema(ctx context.Context, req *tabletmanagerdata.GetSchemaRequest) (*tabletmanagerdata.GetSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchema not implemented")
}
func (*UnimplementedTabletManagerServer) GetPermissions(ctx context.Context, req *tabletmanagerdata.GetPermissionsRequest) (*tabletmanagerdata.GetPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissions not implemented")
}
func (*UnimplementedTabletManagerServer) SetReadOnly(ctx context.Context, req *tabletmanagerdata.SetReadOnlyRequest) (*tabletmanagerdata.SetReadOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetReadOnly not implemented")
}
func (*UnimplementedTabletManagerServer) SetReadWrite(ctx context.Context, req *tabletmanagerdata.SetReadWriteRequest) (*tabletmanagerdata.SetReadWriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetReadWrite not implemented")
}
func (*UnimplementedTabletManagerServer) ChangeType(ctx context.Context, req *tabletmanagerdata.ChangeTypeRequest) (*tabletmanagerdata.ChangeTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeType not implemented")
}
func (*UnimplementedTabletManagerServer) RefreshState(ctx context.Context, req *tabletmanagerdata.RefreshStateRequest) (*tabletmanagerdata.RefreshStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshState not implemented")
}
func (*UnimplementedTabletManagerServer) RunHealthCheck(ctx context.Context, req *tabletmanagerdata.RunHealthCheckRequest) (*tabletmanagerdata.RunHealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunHealthCheck not implemented")
}
func (*UnimplementedTabletManagerServer) IgnoreHealthError(ctx context.Context, req *tabletmanagerdata.IgnoreHealthErrorRequest) (*tabletmanagerdata.IgnoreHealthErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IgnoreHealthError not implemented")
}
func (*UnimplementedTabletManagerServer) ReloadSchema(ctx context.Context, req *tabletmanagerdata.ReloadSchemaRequest) (*tabletmanagerdata.ReloadSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadSchema not implemented")
}
func (*UnimplementedTabletManagerServer) PreflightSchema(ctx context.Context, req *tabletmanagerdata.PreflightSchemaRequest) (*tabletmanagerdata.PreflightSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreflightSchema not implemented")
}
func (*UnimplementedTabletManagerServer) ApplySchema(ctx context.Context, req *tabletmanagerdata.ApplySchemaRequest) (*tabletmanagerdata.ApplySchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplySchema not implemented")
}
func (*UnimplementedTabletManagerServer) LockTables(ctx context.Context, req *tabletmanagerdata.LockTablesRequest) (*tabletmanagerdata.LockTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockTables not implemented")
}
func (*UnimplementedTabletManagerServer) UnlockTables(ctx context.Context, req *tabletmanagerdata.UnlockTablesRequest) (*tabletmanagerdata.UnlockTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockTables not implemented")
}
func (*UnimplementedTabletManagerServer) ExecuteFetchAsDba(ctx context.Context, req *tabletmanagerdata.ExecuteFetchAsDbaRequest) (*tabletmanagerdata.ExecuteFetchAsDbaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFetchAsDba not implemented")
}
func (*UnimplementedTabletManagerServer) ExecuteFetchAsAllPrivs(ctx context.Context, req *tabletmanagerdata.ExecuteFetchAsAllPrivsRequest) (*tabletmanagerdata.ExecuteFetchAsAllPrivsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFetchAsAllPrivs not implemented")
}
func (*UnimplementedTabletManagerServer) ExecuteFetchAsApp(ctx context.Context, req *tabletmanagerdata.ExecuteFetchAsAppRequest) (*tabletmanagerdata.ExecuteFetchAsAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFetchAsApp not implemented")
}
func (*UnimplementedTabletManagerServer) SubordinateStatus(ctx context.Context, req *tabletmanagerdata.SubordinateStatusRequest) (*tabletmanagerdata.SubordinateStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubordinateStatus not implemented")
}
func (*UnimplementedTabletManagerServer) MainPosition(ctx context.Context, req *tabletmanagerdata.MainPositionRequest) (*tabletmanagerdata.MainPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MainPosition not implemented")
}
func (*UnimplementedTabletManagerServer) StopSubordinate(ctx context.Context, req *tabletmanagerdata.StopSubordinateRequest) (*tabletmanagerdata.StopSubordinateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSubordinate not implemented")
}
func (*UnimplementedTabletManagerServer) StopSubordinateMinimum(ctx context.Context, req *tabletmanagerdata.StopSubordinateMinimumRequest) (*tabletmanagerdata.StopSubordinateMinimumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSubordinateMinimum not implemented")
}
func (*UnimplementedTabletManagerServer) StartSubordinate(ctx context.Context, req *tabletmanagerdata.StartSubordinateRequest) (*tabletmanagerdata.StartSubordinateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSubordinate not implemented")
}
func (*UnimplementedTabletManagerServer) StartSubordinateUntilAfter(ctx context.Context, req *tabletmanagerdata.StartSubordinateUntilAfterRequest) (*tabletmanagerdata.StartSubordinateUntilAfterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSubordinateUntilAfter not implemented")
}
func (*UnimplementedTabletManagerServer) TabletExternallyReparented(ctx context.Context, req *tabletmanagerdata.TabletExternallyReparentedRequest) (*tabletmanagerdata.TabletExternallyReparentedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TabletExternallyReparented not implemented")
}
func (*UnimplementedTabletManagerServer) TabletExternallyElected(ctx context.Context, req *tabletmanagerdata.TabletExternallyElectedRequest) (*tabletmanagerdata.TabletExternallyElectedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TabletExternallyElected not implemented")
}
func (*UnimplementedTabletManagerServer) GetSubordinates(ctx context.Context, req *tabletmanagerdata.GetSubordinatesRequest) (*tabletmanagerdata.GetSubordinatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubordinates not implemented")
}
func (*UnimplementedTabletManagerServer) VReplicationExec(ctx context.Context, req *tabletmanagerdata.VReplicationExecRequest) (*tabletmanagerdata.VReplicationExecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VReplicationExec not implemented")
}
func (*UnimplementedTabletManagerServer) VReplicationWaitForPos(ctx context.Context, req *tabletmanagerdata.VReplicationWaitForPosRequest) (*tabletmanagerdata.VReplicationWaitForPosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VReplicationWaitForPos not implemented")
}
func (*UnimplementedTabletManagerServer) ResetReplication(ctx context.Context, req *tabletmanagerdata.ResetReplicationRequest) (*tabletmanagerdata.ResetReplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetReplication not implemented")
}
func (*UnimplementedTabletManagerServer) InitMain(ctx context.Context, req *tabletmanagerdata.InitMainRequest) (*tabletmanagerdata.InitMainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitMain not implemented")
}
func (*UnimplementedTabletManagerServer) PopulateReparentJournal(ctx context.Context, req *tabletmanagerdata.PopulateReparentJournalRequest) (*tabletmanagerdata.PopulateReparentJournalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PopulateReparentJournal not implemented")
}
func (*UnimplementedTabletManagerServer) InitSubordinate(ctx context.Context, req *tabletmanagerdata.InitSubordinateRequest) (*tabletmanagerdata.InitSubordinateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitSubordinate not implemented")
}
func (*UnimplementedTabletManagerServer) DemoteMain(ctx context.Context, req *tabletmanagerdata.DemoteMainRequest) (*tabletmanagerdata.DemoteMainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DemoteMain not implemented")
}
func (*UnimplementedTabletManagerServer) UndoDemoteMain(ctx context.Context, req *tabletmanagerdata.UndoDemoteMainRequest) (*tabletmanagerdata.UndoDemoteMainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndoDemoteMain not implemented")
}
func (*UnimplementedTabletManagerServer) PromoteSubordinateWhenCaughtUp(ctx context.Context, req *tabletmanagerdata.PromoteSubordinateWhenCaughtUpRequest) (*tabletmanagerdata.PromoteSubordinateWhenCaughtUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromoteSubordinateWhenCaughtUp not implemented")
}
func (*UnimplementedTabletManagerServer) SubordinateWasPromoted(ctx context.Context, req *tabletmanagerdata.SubordinateWasPromotedRequest) (*tabletmanagerdata.SubordinateWasPromotedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubordinateWasPromoted not implemented")
}
func (*UnimplementedTabletManagerServer) SetMain(ctx context.Context, req *tabletmanagerdata.SetMainRequest) (*tabletmanagerdata.SetMainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMain not implemented")
}
func (*UnimplementedTabletManagerServer) SubordinateWasRestarted(ctx context.Context, req *tabletmanagerdata.SubordinateWasRestartedRequest) (*tabletmanagerdata.SubordinateWasRestartedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubordinateWasRestarted not implemented")
}
func (*UnimplementedTabletManagerServer) StopReplicationAndGetStatus(ctx context.Context, req *tabletmanagerdata.StopReplicationAndGetStatusRequest) (*tabletmanagerdata.StopReplicationAndGetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopReplicationAndGetStatus not implemented")
}
func (*UnimplementedTabletManagerServer) PromoteSubordinate(ctx context.Context, req *tabletmanagerdata.PromoteSubordinateRequest) (*tabletmanagerdata.PromoteSubordinateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromoteSubordinate not implemented")
}
func (*UnimplementedTabletManagerServer) Backup(req *tabletmanagerdata.BackupRequest, srv TabletManager_BackupServer) error {
	return status.Errorf(codes.Unimplemented, "method Backup not implemented")
}
func (*UnimplementedTabletManagerServer) RestoreFromBackup(req *tabletmanagerdata.RestoreFromBackupRequest, srv TabletManager_RestoreFromBackupServer) error {
	return status.Errorf(codes.Unimplemented, "method RestoreFromBackup not implemented")
}

func RegisterTabletManagerServer(s *grpc.Server, srv TabletManagerServer) {
	s.RegisterService(&_TabletManager_serviceDesc, srv)
}

func _TabletManager_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).Ping(ctx, req.(*tabletmanagerdata.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_Sleep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.SleepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).Sleep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/Sleep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).Sleep(ctx, req.(*tabletmanagerdata.SleepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_ExecuteHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.ExecuteHookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).ExecuteHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/ExecuteHook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).ExecuteHook(ctx, req.(*tabletmanagerdata.ExecuteHookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_GetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.GetSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).GetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/GetSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).GetSchema(ctx, req.(*tabletmanagerdata.GetSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_GetPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.GetPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).GetPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/GetPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).GetPermissions(ctx, req.(*tabletmanagerdata.GetPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_SetReadOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.SetReadOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).SetReadOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/SetReadOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).SetReadOnly(ctx, req.(*tabletmanagerdata.SetReadOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_SetReadWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.SetReadWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).SetReadWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/SetReadWrite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).SetReadWrite(ctx, req.(*tabletmanagerdata.SetReadWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_ChangeType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.ChangeTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).ChangeType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/ChangeType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).ChangeType(ctx, req.(*tabletmanagerdata.ChangeTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_RefreshState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.RefreshStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).RefreshState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/RefreshState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).RefreshState(ctx, req.(*tabletmanagerdata.RefreshStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_RunHealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.RunHealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).RunHealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/RunHealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).RunHealthCheck(ctx, req.(*tabletmanagerdata.RunHealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_IgnoreHealthError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.IgnoreHealthErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).IgnoreHealthError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/IgnoreHealthError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).IgnoreHealthError(ctx, req.(*tabletmanagerdata.IgnoreHealthErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_ReloadSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.ReloadSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).ReloadSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/ReloadSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).ReloadSchema(ctx, req.(*tabletmanagerdata.ReloadSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_PreflightSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.PreflightSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).PreflightSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/PreflightSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).PreflightSchema(ctx, req.(*tabletmanagerdata.PreflightSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_ApplySchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.ApplySchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).ApplySchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/ApplySchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).ApplySchema(ctx, req.(*tabletmanagerdata.ApplySchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_LockTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.LockTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).LockTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/LockTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).LockTables(ctx, req.(*tabletmanagerdata.LockTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_UnlockTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.UnlockTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).UnlockTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/UnlockTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).UnlockTables(ctx, req.(*tabletmanagerdata.UnlockTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_ExecuteFetchAsDba_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.ExecuteFetchAsDbaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).ExecuteFetchAsDba(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/ExecuteFetchAsDba",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).ExecuteFetchAsDba(ctx, req.(*tabletmanagerdata.ExecuteFetchAsDbaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_ExecuteFetchAsAllPrivs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.ExecuteFetchAsAllPrivsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).ExecuteFetchAsAllPrivs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/ExecuteFetchAsAllPrivs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).ExecuteFetchAsAllPrivs(ctx, req.(*tabletmanagerdata.ExecuteFetchAsAllPrivsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_ExecuteFetchAsApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.ExecuteFetchAsAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).ExecuteFetchAsApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/ExecuteFetchAsApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).ExecuteFetchAsApp(ctx, req.(*tabletmanagerdata.ExecuteFetchAsAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_SubordinateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.SubordinateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).SubordinateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/SubordinateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).SubordinateStatus(ctx, req.(*tabletmanagerdata.SubordinateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_MainPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.MainPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).MainPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/MainPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).MainPosition(ctx, req.(*tabletmanagerdata.MainPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_StopSubordinate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.StopSubordinateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).StopSubordinate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/StopSubordinate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).StopSubordinate(ctx, req.(*tabletmanagerdata.StopSubordinateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_StopSubordinateMinimum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.StopSubordinateMinimumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).StopSubordinateMinimum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/StopSubordinateMinimum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).StopSubordinateMinimum(ctx, req.(*tabletmanagerdata.StopSubordinateMinimumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_StartSubordinate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.StartSubordinateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).StartSubordinate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/StartSubordinate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).StartSubordinate(ctx, req.(*tabletmanagerdata.StartSubordinateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_StartSubordinateUntilAfter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.StartSubordinateUntilAfterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).StartSubordinateUntilAfter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/StartSubordinateUntilAfter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).StartSubordinateUntilAfter(ctx, req.(*tabletmanagerdata.StartSubordinateUntilAfterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_TabletExternallyReparented_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.TabletExternallyReparentedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).TabletExternallyReparented(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/TabletExternallyReparented",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).TabletExternallyReparented(ctx, req.(*tabletmanagerdata.TabletExternallyReparentedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_TabletExternallyElected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.TabletExternallyElectedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).TabletExternallyElected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/TabletExternallyElected",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).TabletExternallyElected(ctx, req.(*tabletmanagerdata.TabletExternallyElectedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_GetSubordinates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.GetSubordinatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).GetSubordinates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/GetSubordinates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).GetSubordinates(ctx, req.(*tabletmanagerdata.GetSubordinatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_VReplicationExec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.VReplicationExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).VReplicationExec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/VReplicationExec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).VReplicationExec(ctx, req.(*tabletmanagerdata.VReplicationExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_VReplicationWaitForPos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.VReplicationWaitForPosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).VReplicationWaitForPos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/VReplicationWaitForPos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).VReplicationWaitForPos(ctx, req.(*tabletmanagerdata.VReplicationWaitForPosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_ResetReplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.ResetReplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).ResetReplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/ResetReplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).ResetReplication(ctx, req.(*tabletmanagerdata.ResetReplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_InitMain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.InitMainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).InitMain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/InitMain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).InitMain(ctx, req.(*tabletmanagerdata.InitMainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_PopulateReparentJournal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.PopulateReparentJournalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).PopulateReparentJournal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/PopulateReparentJournal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).PopulateReparentJournal(ctx, req.(*tabletmanagerdata.PopulateReparentJournalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_InitSubordinate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.InitSubordinateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).InitSubordinate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/InitSubordinate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).InitSubordinate(ctx, req.(*tabletmanagerdata.InitSubordinateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_DemoteMain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.DemoteMainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).DemoteMain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/DemoteMain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).DemoteMain(ctx, req.(*tabletmanagerdata.DemoteMainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_UndoDemoteMain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.UndoDemoteMainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).UndoDemoteMain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/UndoDemoteMain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).UndoDemoteMain(ctx, req.(*tabletmanagerdata.UndoDemoteMainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_PromoteSubordinateWhenCaughtUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.PromoteSubordinateWhenCaughtUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).PromoteSubordinateWhenCaughtUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/PromoteSubordinateWhenCaughtUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).PromoteSubordinateWhenCaughtUp(ctx, req.(*tabletmanagerdata.PromoteSubordinateWhenCaughtUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_SubordinateWasPromoted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.SubordinateWasPromotedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).SubordinateWasPromoted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/SubordinateWasPromoted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).SubordinateWasPromoted(ctx, req.(*tabletmanagerdata.SubordinateWasPromotedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_SetMain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.SetMainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).SetMain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/SetMain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).SetMain(ctx, req.(*tabletmanagerdata.SetMainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_SubordinateWasRestarted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.SubordinateWasRestartedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).SubordinateWasRestarted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/SubordinateWasRestarted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).SubordinateWasRestarted(ctx, req.(*tabletmanagerdata.SubordinateWasRestartedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_StopReplicationAndGetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.StopReplicationAndGetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).StopReplicationAndGetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/StopReplicationAndGetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).StopReplicationAndGetStatus(ctx, req.(*tabletmanagerdata.StopReplicationAndGetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_PromoteSubordinate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tabletmanagerdata.PromoteSubordinateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletManagerServer).PromoteSubordinate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabletmanagerservice.TabletManager/PromoteSubordinate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletManagerServer).PromoteSubordinate(ctx, req.(*tabletmanagerdata.PromoteSubordinateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletManager_Backup_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(tabletmanagerdata.BackupRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TabletManagerServer).Backup(m, &tabletManagerBackupServer{stream})
}

type TabletManager_BackupServer interface {
	Send(*tabletmanagerdata.BackupResponse) error
	grpc.ServerStream
}

type tabletManagerBackupServer struct {
	grpc.ServerStream
}

func (x *tabletManagerBackupServer) Send(m *tabletmanagerdata.BackupResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TabletManager_RestoreFromBackup_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(tabletmanagerdata.RestoreFromBackupRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TabletManagerServer).RestoreFromBackup(m, &tabletManagerRestoreFromBackupServer{stream})
}

type TabletManager_RestoreFromBackupServer interface {
	Send(*tabletmanagerdata.RestoreFromBackupResponse) error
	grpc.ServerStream
}

type tabletManagerRestoreFromBackupServer struct {
	grpc.ServerStream
}

func (x *tabletManagerRestoreFromBackupServer) Send(m *tabletmanagerdata.RestoreFromBackupResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _TabletManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tabletmanagerservice.TabletManager",
	HandlerType: (*TabletManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _TabletManager_Ping_Handler,
		},
		{
			MethodName: "Sleep",
			Handler:    _TabletManager_Sleep_Handler,
		},
		{
			MethodName: "ExecuteHook",
			Handler:    _TabletManager_ExecuteHook_Handler,
		},
		{
			MethodName: "GetSchema",
			Handler:    _TabletManager_GetSchema_Handler,
		},
		{
			MethodName: "GetPermissions",
			Handler:    _TabletManager_GetPermissions_Handler,
		},
		{
			MethodName: "SetReadOnly",
			Handler:    _TabletManager_SetReadOnly_Handler,
		},
		{
			MethodName: "SetReadWrite",
			Handler:    _TabletManager_SetReadWrite_Handler,
		},
		{
			MethodName: "ChangeType",
			Handler:    _TabletManager_ChangeType_Handler,
		},
		{
			MethodName: "RefreshState",
			Handler:    _TabletManager_RefreshState_Handler,
		},
		{
			MethodName: "RunHealthCheck",
			Handler:    _TabletManager_RunHealthCheck_Handler,
		},
		{
			MethodName: "IgnoreHealthError",
			Handler:    _TabletManager_IgnoreHealthError_Handler,
		},
		{
			MethodName: "ReloadSchema",
			Handler:    _TabletManager_ReloadSchema_Handler,
		},
		{
			MethodName: "PreflightSchema",
			Handler:    _TabletManager_PreflightSchema_Handler,
		},
		{
			MethodName: "ApplySchema",
			Handler:    _TabletManager_ApplySchema_Handler,
		},
		{
			MethodName: "LockTables",
			Handler:    _TabletManager_LockTables_Handler,
		},
		{
			MethodName: "UnlockTables",
			Handler:    _TabletManager_UnlockTables_Handler,
		},
		{
			MethodName: "ExecuteFetchAsDba",
			Handler:    _TabletManager_ExecuteFetchAsDba_Handler,
		},
		{
			MethodName: "ExecuteFetchAsAllPrivs",
			Handler:    _TabletManager_ExecuteFetchAsAllPrivs_Handler,
		},
		{
			MethodName: "ExecuteFetchAsApp",
			Handler:    _TabletManager_ExecuteFetchAsApp_Handler,
		},
		{
			MethodName: "SubordinateStatus",
			Handler:    _TabletManager_SubordinateStatus_Handler,
		},
		{
			MethodName: "MainPosition",
			Handler:    _TabletManager_MainPosition_Handler,
		},
		{
			MethodName: "StopSubordinate",
			Handler:    _TabletManager_StopSubordinate_Handler,
		},
		{
			MethodName: "StopSubordinateMinimum",
			Handler:    _TabletManager_StopSubordinateMinimum_Handler,
		},
		{
			MethodName: "StartSubordinate",
			Handler:    _TabletManager_StartSubordinate_Handler,
		},
		{
			MethodName: "StartSubordinateUntilAfter",
			Handler:    _TabletManager_StartSubordinateUntilAfter_Handler,
		},
		{
			MethodName: "TabletExternallyReparented",
			Handler:    _TabletManager_TabletExternallyReparented_Handler,
		},
		{
			MethodName: "TabletExternallyElected",
			Handler:    _TabletManager_TabletExternallyElected_Handler,
		},
		{
			MethodName: "GetSubordinates",
			Handler:    _TabletManager_GetSubordinates_Handler,
		},
		{
			MethodName: "VReplicationExec",
			Handler:    _TabletManager_VReplicationExec_Handler,
		},
		{
			MethodName: "VReplicationWaitForPos",
			Handler:    _TabletManager_VReplicationWaitForPos_Handler,
		},
		{
			MethodName: "ResetReplication",
			Handler:    _TabletManager_ResetReplication_Handler,
		},
		{
			MethodName: "InitMain",
			Handler:    _TabletManager_InitMain_Handler,
		},
		{
			MethodName: "PopulateReparentJournal",
			Handler:    _TabletManager_PopulateReparentJournal_Handler,
		},
		{
			MethodName: "InitSubordinate",
			Handler:    _TabletManager_InitSubordinate_Handler,
		},
		{
			MethodName: "DemoteMain",
			Handler:    _TabletManager_DemoteMain_Handler,
		},
		{
			MethodName: "UndoDemoteMain",
			Handler:    _TabletManager_UndoDemoteMain_Handler,
		},
		{
			MethodName: "PromoteSubordinateWhenCaughtUp",
			Handler:    _TabletManager_PromoteSubordinateWhenCaughtUp_Handler,
		},
		{
			MethodName: "SubordinateWasPromoted",
			Handler:    _TabletManager_SubordinateWasPromoted_Handler,
		},
		{
			MethodName: "SetMain",
			Handler:    _TabletManager_SetMain_Handler,
		},
		{
			MethodName: "SubordinateWasRestarted",
			Handler:    _TabletManager_SubordinateWasRestarted_Handler,
		},
		{
			MethodName: "StopReplicationAndGetStatus",
			Handler:    _TabletManager_StopReplicationAndGetStatus_Handler,
		},
		{
			MethodName: "PromoteSubordinate",
			Handler:    _TabletManager_PromoteSubordinate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Backup",
			Handler:       _TabletManager_Backup_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RestoreFromBackup",
			Handler:       _TabletManager_RestoreFromBackup_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tabletmanagerservice.proto",
}
